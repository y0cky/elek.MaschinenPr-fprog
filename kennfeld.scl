// Überarbeitung Johannes Wilhelm Juli 2024

// Changelog:
// Stop trigger extern hinzugefügt
// Prozessfortschritt in % hinzugefüht
// Berechnen von Leistungen aller Arbeitspunkte
// Variable Anzahl Messpunkte


// Todo
// Leistungsarray nach größe sortieren
// Steuerung nach Leistungsarray


// Trigger erkennen
#R_TRIG_InstStart(CLK := #Start,
                  Q => #FPStart); // Flankenerkennung für Start
#R_TRIG_InstStop(CLK := #Stop,
                 Q => #FPStop); // Flankenerkennung für Stop

//Stopbedingungen: bei Fehler, Abbruch oder Einschaltsperre der FUs
IF ("SINA_SPEED_TLG20_DB".error OR "SinaSpeed_DB".Lockout OR "SO_Power_DB".AxisError OR "Keba_Statusword".%X6 OR #Abbruch OR #FPStop) THEN
    #Stop := TRUE;
    #Schritt := 7;
    //ELSIF NOT #Start AND #statStart THEN
    // #Schritt := 7;
ELSE
    #Stop := False;
END_IF;

//wenn Signal #Start positive Flanke hat und kein Fehler ansteht, Werte initialisieren
IF #FPStart AND NOT #Stop AND "7K2" THEN
    #statStart := TRUE;
    #Schritt := 0;
    #m := 0;
    #n := 0;
    #i := 0;
    #j := 0;
    #y := 0;
    #x := 0;
    #statReal := 0.0;
    #Messung := 0;
    #Schleife := FALSE;
    #Mmax := 1000;
    #Fortschritt := 0;
    "HMI".Messzyklen := "HMI".AnzahlMesszyklenAC;
END_IF;

IF #Schritt = 6 THEN //Timer zur verzögerten Ausführung des Messskriptes in WinCC
    #StartTimer := TRUE;
ELSE
    #StartTimer := FALSE;
END_IF;

#IEC_Timer_Inst(IN := #StartTimer,
                PT := T#2s,
                Q => #Timer,
                ET => #VergZeit);

IF #statStart THEN
    
    CASE #Schritt OF
		
		0: // Messpunkte definieren
			index[] = Messpunkte.index
			drehzahl[] = Messpunkte.drehzahl
			drehmoment[] = Messpunkte.drehmoment
			
			"ZES".Messprogramm := 1;
            "HMI".Bedienfreigabe := false; //Handbedienung ausschalten
			
			AnzahlMesspunkte := 0;
			
			FOR #a := 0 TO 9999 DO
				#Messpunkte[#a].index =  Messpunkte_DB.index[]
				#Messpunkte[#a].drehzahl =  Messpunkte_DB.drehzahl[]
				#Messpunkte[#a].drehmoment =  Messpunkte_DB.drehmoment[]
				
				// Prüfe, ob Auslesen beendet und setzte Anzahl der Messpunkte = höchster Indexwert
				IF #a > 0 AND #Messpunkte[#a].index = 0 THEN
					#AnzahlMesspunkte := #Messpunkte[#a].index;
					#a = 999;
				END_IF
			END_FOR
			
			#Schritt += 1;
			
		1: 	//Dateinamen für DataLogging bilden
            #Uhrzeit.RetVal := RD_LOC_T(#Uhrzeit.Zeit);
            #ZeitstempelDTL := "LGF_DTLtoString_DE"("date" := #Uhrzeit.Zeit, separator := '-');
            //Funktion DTLtoString liefert String mit Länge 29 im Format DD-MM-YYYY HH:MM:SS.NSNSNSNSNSNSNSNSNS
            //In Dateiname des DataLogging dürfen keine Leerzeichen vorhanden sein, Leerstellen werden nicht benötigt
            //Leerzeichen an Position 11 löschen und alles hinter Position 19 (.Nanosekunden) verwerfen
            "DataLogging_DB".name := CONCAT(IN1 := 'Mess_Kennfeld_', IN2 := DELETE(IN := LEFT(IN := #ZeitstempelDTL, L := 19), L := 1, P := 11));
            #Schritt += 1;
			
		2: //Drehzahl vorgeben und Lastmaschine starten
		
			"Daten".Sinamics.SW := #Messpunkte[#Messung].drehzahl;
			"ZES".Drehzahl := #Messpunkte[#Messung].drehzahl;
            "Daten".Sinamics.Freigabe := true;
            IF "Sinamics_Statusword".%X2 AND "Sinamics_Statusword".%X8 THEN //RM Sinamics in Betrieb und Ziel erreicht
                #Schritt += 1;
            END_IF;
            
        3: //Drehmoment für Keba vorgeben, Prüfmaschine starten und anschließend über WinCC Messung starten
			"Daten".Keba.SW := #Messpunkte[#Messung].dehmoment;
            "ZES".Drehmoment := #Messpunkte[#Messung].dehmoment;
			
            "Daten".Keba.Freigabe := true;
			
            IF "Keba_Statusword".%X2 AND "Keba_Statusword".%X10 AND "Sinamics_Statusword".%X8 THEN //RM Keba in Betrieb und Ziel erreicht bei beiden FUs
                #Schritt += 1;
            END_IF
		4: // Starte Messung
			"ZES".NummerMessung := #Messung;
            "ZES".AnzahlMessungen := #AnzahlMesspunkte
            "DataLogging_DB".dataLogEntries := INT_TO_UINT(#AnzahlMesspunkte + 1);
			
            "ZES".StartMessung := true; //-> WinCC-Skript starten
			
			#Schritt += 1;


        5: //Warten, bis WinCC Skript fertig ist und DataLogging starten
            IF "ZES".SPSAuslesen THEN //Bit wird von WinCC-Skript gesetzt, startet DataLogging ->FB12 WinCCDataLog_V2
                "ZES".StartMessung := false;
                #Schritt += 1;
            ELSIF "HMI".Fehler_Skript THEN
                IF #Schleife = false THEN //bei erstmaligem Fehler
                    "ZES".StartMessung := false; //Messung neustarten und zurück in Schritt 2
                    "HMI".Fehler_Skript := false; //Fehlervariable zurücksetzen, falls WinCC zu langsam
                    #Schleife := true;
                    #Schritt := 2;
                ELSIF #Schleife THEN //bei erneutem Fehler Abbruch
                    #Schritt := 7;
                END_IF;
            END_IF;
			
        6: //Warten, bis DataLogging fertig und Timer abgelaufen ist
            IF NOT "ZES".SPSAuslesen AND #Timer THEN
                #Schritt += 1;
            END_IF;
			
        6: //Überprüfen, ob nächster Punkt angefahren wird oder Messung zu Ende ist
            #Fortschritt := (100 / #AnzahlMesspunkte) * ( #Messung + 1 );
            
			IF #Messung < #AnzahlMesspunkte THEN
				#n += 1;
				#Messung += 1;
				
				#Schritt := 2;
			ELSE
				#Schritt += 1;
			END_IF
			
			
            
        7: //Ende, alles zurücksetzen
            "Daten".Sinamics.Freigabe := FALSE;
            "Daten".Keba.Freigabe := FALSE;
            "Daten".Sinamics.SW := 0.0;
            "Daten".Keba.SW := 0.0;
            "ZES".Messprogramm := 0;
            #statStart := false;
            #Fortschritt := 0;
            IF #Abbruch THEN //bei Abbruch weitere Werte zurücksetzen und angefangenes DataLog löschen
                "DataLogging_DB".write := False;
                "DataLogging_DB".delete := TRUE;
                "ZES".SPSAuslesen := false;
                "ZES".StartMessung := false;
                "Daten".StartStringAuslesen := FALSE;
            ELSIF NOT #Abbruch THEN
                "HMI".Bedienfreigabe := true;
                "HMI".FUSpannung := true;
            END_IF;
        ELSE  // Statement section ELSE
            ;
    END_CASE;
END_IF;
